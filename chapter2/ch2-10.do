/* Code for imputing data, cleaning, and calculating sustainability vars 

Authors: Brian Beadle, Stephan Brosig 
Date: August, 2020 to February, 2023
 
Tasks: merge data from other sources (median wages, income, price indices, etc.) 
			- generated by 020-asci_impadd
       aggregate to NUTS2 level so that n2-data from other sources can be merged
input: stata\dat\\010-asci_fadnDEU_all.dta from 010-asci_fadn.do  fadn data
       020-asci_impadd_medwage_n3.dta               generated by 020-asci_impadd
       020-asci_impadd_fuel_prices.dta              generated by 020-asci_impadd
       020-asci_impadd_ag_income_data.dta           generated by 020-asci_impadd
       020-asci_impadd_producer_price_index.dta     generated by 020-asci_impadd
       020-asci_impadd_cpi.dta                      generated by 020-asci_impadd
output:dat\asci_variables_sb.dta
       log\asci_variables_sb.log  description of variables 
*/

clear all
clear matrix

set linesize 120   // portrait: 100 landscape: 151

*cd C:/asci/stata  // BB office directory

**********************************
* global file paths for all users
global path_raw "C:/asci/stata/raw"  // BB raw 
global path_dat "C:/asci/stata/dat"  // BB dat
*global path_raw "~/Documents/Uni/Projekte/sustainability-index/raw" // CW raw
*global path_dat "~/Documents/Uni/Projekte/sustainability-index/dat" // CW dat
*global path_raw raw  // SB raw
*global path_dat dat  // SB dat
***********************************

capture program drop logfi // drop previous version of this program
*program logfi  // produce clean log file (without citing program code): 
* 					so to make the log file somewhat more an output file

use dat/010-asci_fadnDEU_all.dta, clear 
lab val idn   // detach value label

***** importing and modifying datasets external of fadn

* merging NUTS3 median wage Bundesagentur für Arbeit and generating wage ratio
merge m:m NUTS3 YEAR using dat/020-asci_impadd_medwage_n3.dta 
keep if _merge==3
drop _merge

* merging fuel price data
merge m:m YEAR using dat/020-asci_impadd_fuel_prices.dta
keep if _merge==3
drop _merge

* merging agricultural income data
merge m:1 YEAR using dat/020-asci_impadd_ag_income_data.dta
keep if _merge==3
drop _merge

* merging producer price index data
merge m:m YEAR using dat/020-asci_impadd_producer_price_index.dta
keep if _merge==3
drop _merge

* merging consumer price index data
merge m:m YEAR using dat/020-asci_impadd_cpi.dta
keep if _merge==3
drop _merge

save dat/final_asci_raw_variables.dta, replace  
use dat/final_asci_raw_variables.dta, clear

********************************************************************************
***************************** calculating indicators ***************************
********************************************************************************

*  AVERAGE LABOR REMUNERATION VARIABLE
* generate median of agr wage variable (pppepawu) from our FADN data 
* (alternative to using Test Farm Results published on Thünen Website)
gen pppepawu = (SE420 + SE370)/SE010 
bysort YEAR: egen pppepawu_p10  = pctile(pppepawu) , p(10)
bysort YEAR: egen pppepawu_p25  = pctile(pppepawu) , p(25)
bysort YEAR: egen pppepawu_p50  = pctile(pppepawu) , p(50)  // by YEAR:
* 	median of [(profit + personel expenses) / AWU], 
* 	i.e. of avg labor remuneration on the farm

bysort YEAR A1: egen pppepawu_p50n = pctile(pppepawu) , p(50) // 
* 	by YEAR and fed state: median of [(profit + personel expenses) / AWU], 
* 	i.e. of avg labor remuneration on the farm

bysort YEAR: egen pppepawu_mean   = mean(pppepawu) 
bysort YEAR: egen pppepawu_p75  = pctile(pppepawu) , p(75)
bysort YEAR: egen pppepawu_p90  = pctile(pppepawu) , p(90)
format pppepawu* %8.0f

// display agric wage data on national and federal state level 
*qui log on
di "Number of farms in Sample by Federal State (Nuts1) and Median of" _n ///
   "profit plus personnel expenses per AWU by Federal State" _n ///
   "[pppepawu = (SE420 + SE370)/SE010]"
table A1, c(freq p50 pppepawu) row format(%9.0fc)
*qui log off

********************************************************************************
*** PROFITABILITY INDICATOR
* profit that includes regional differences
gen profit = SE420-(pppepawu_p50n*SE015) 
lab var profit "profit: SE420-(pppepawu_p50n*SE015)"

********************************************************************************
*** SOLVENCY
gen solvency = SE485/SE436  // debt-asset ratio
lab var solvency "solvency: Debt-asset ratio (SE485/SE436)"

********************************************************************************
*** DIVERSIFICATION IN TWO STEPS AND ONE PRECEDING DATA CHECKING STEP
/* macro for list of agricultural products. List of products included:
	SE140 = cereals 
	SE145 = protein crops 
	SE146 = energy crops 
	SE150 = potatoes 
	SE155 = sugar beet 
	SE160 = oil seed crops 
	SE165 = industrial crops 
	SE170 = vegs&flowers 
	SE175 = fruit 
	SE185 = wine 
	SE195 = fodder 
	SE200 = o.crop output
	SE216 = cows milk 
	SE220 = beef 
	SE225 = pork 
	SE230 = sheep & goat 
	SE235 = poultry 
	SE240 = eggs 
	SE245 = ewe's & goat's milk 
	SE251 = other livestock products 
	SE256 = other output
	211125: energy crops (SE146) and other output (SE256) added
*/
local products SE140 SE145 SE146 SE150 SE155 SE160 SE165 SE170 SE175 SE185 ///
SE195 SE200 SE216 SE220 SE225 SE230 SE235 SE240 SE245 SE251 SE256  

* step 0: check consistency of output figures
*qui log on
di "ASSESSMENT OF THE ECONOMIC DIVERSITY INDICATOR" _n ///
   "Diversity dummy indicates farms with any of the following 19 activities creating >66% of value of output"
describe `products'
*qui log off

* self-computed total output aggregated across all categories 
* 	(including energy crops and other output)
egen SE131_s = rowtotal(`products') 

* economic diversity as a continuous variable 
local products_p =""
foreach vvv in `products' {
	qui gen `vvv'_p = `vvv'/SE131_s
	local products_p  `products_p'  `vvv'_p // generate string with varnames 
}

* annual share in total output of the product with the largest share
egen e_diverse_annual = rowmax(`products_p') 
tsset idn YEAR, yearly

* as moving 3-year average: if missing, replaces with a single year value
gen e_diverse = (L1.e_diverse_annual+e_diverse_annual+F1.e_diverse_annual)/3 
replace e_diverse = e_diverse_annual if e_diverse == . 

lab var e_diverse ///
"Specialization: maximum share of a single product in total output"

recode e_diverse (min / 0 = 1 "<=0%") (0 / 1 = 2  "0-100%") ///
	(1 / 1.1 =3 "100-110%") (1.1/ 2 =4 "110-200%") (2/ max =5 ">200%"), ///
	gen(e_diverse_d)
	
recode e_diverse (min / .33 = 1 "<=33%") (.33 / .66 = 2  "33-66%") ///
	(.66 / 1 =3 "66-100%")  (1/ max =4 ">100%"), gen(e_diverse_cl)

	label var e_diverse_d ///
"Specialization (maximum share of a single product in total output), grouped"

label var e_diverse_cl ///
"e_diverse-class (maximum share of a single product in total output), grouped"

di _n "Specialization (=reciprocal of economic diversification)" _n
tab e_diverse_d , missing
tab e_diverse_cl 
sum e_diverse, de

********************************************************************************
* PESTICIDE USE 
gen pesticide = SE300/SE025
lab var pesticide "pestic exp (SE300/SE025 [€/ha])"

********************************************************************************
/** EMISSIONS. references to tables and equations are from ipcc guidelines

* n2o manure management 
* notes:
	direct emissions using equation 10.25 with table 10.21 for emission factors 
	uses Germany-specific N excretion rates (see paper)  
	nitrous emissions are converted to co2 equivalents (x298 multiplier)
	
	Assumptions: 
	unknown factor for fraction of manure in a mgmt system, so assuming 100% 
	unknown type of mgmt system, so averaging emission factors for all systems
	animal weights derived from state averages (see paper)
*/
gen nex_cow = 0.48*(587/1000)*365
gen nex_cattle = 0.33*(623.57/1000)*365
gen nex_pigs = 0.465*(118.03/1000)*365
gen nex_sg = 1.065*(80/1000)*365

gen mm_n2o_cow = SE085*nex_cow*0.013737*(44/28)
gen mm_n2o_cattle = SE090*nex_cattle*0.013737*(44/28)
gen mm_n2o_pigs = SE100*nex_pigs*0.013737*(44/28)
gen mm_n2o_sg = SE095*nex_sg*0.013737*(44/28)
gen mm_n2o = (mm_n2o_cow+mm_n2o_cattle+mm_n2o_pigs+mm_n2o_sg)*298 
lab var mm_n2o "n2o manure management livestock"

drop mm_n2o_*
summarize mm_n2o

/* ch4 manure management 
*  notes and assumptions: 
	determined by equation 10.22 and table 10.14 
	using an average annual temp of 10C; 
		(climate-data.org reports an average of 10.2 for Germany)
	IPCC gives a value of 6 for market swine and 9 for breeding swine; 
		type is unknown so using average of 7.5
	methane emissions are converted to co2 equivalents (x25 multiplier)
*/
gen mm_ch4_cow = (21*SE085)/10^6
gen mm_ch4_cattle = (1*SE090)/10^6
gen mm_ch4_pigs = (7.5*SE100)/10^6 
gen mm_ch4 = (mm_ch4_cow+mm_ch4_cattle+mm_ch4_pigs)*25 
lab var mm_ch4 "lvst ch4 manure management" 
drop mm_ch4_*
summarize mm_ch4

* ch4 enteric fermentation
gen enteric_cow = (117*SE085)/10^6
gen enteric_cattle = (57*SE090)/10^6
gen enteric_sg = (6.5*SE095)/10^6
gen enteric_pigs = (1.5*SE100)/10^6
gen enteric = (enteric_cow+enteric_cattle+enteric_sg+enteric_pigs)*25 
lab var enteric "lvst enteric ch4 emiss"
drop enteric_*
summarize enteric

/* n2o from fertilizers 
* notes:
	fertilizers = the sum of crops multiplied by the application: N(kg)/ha 
	must estimate weight from cost and nitrogen content from averages
*/	

gen n_fert = (SE295/786)*0.46
gen n2o_fert = (n_fert*0.0125*(44/28))*298  // w/multiplier
lab var n2o_fert "n2o from fertilizers"
sum n2o_fert

/* crop residues 
* 	notes and assumptions:
	fresh weight yield data are scarce so using numbers from Eurostat 
	these do vary by year but most years are missing,
	so choosing the values closest to the middle of the observation period: 
		cereals 6.69 (2010)
		pulses and protein crops for "other field crops" 2.5 (2011)
		a bulk of energy crop production in Germany is maize, 
			so using that for energy crop land: 9.09 (2010)
		no data for vegetable and flower indicator so omitting
*/	
gen cereal_cr = SE035*(((6.69/1000)*1.09+0.88)*(0.006+0.22*0.009))
gen fc_cr = SE041*(((2.5/1000)*1.13+0.85)*(0.008+0.19*0.008))
gen energy_cr = SE042*(((9.09/1000)*1.03+0.61)*(0.006+0.22*0.007))
gen residue = (cereal_cr+fc_cr+energy_cr)*298
drop cereal_cr fc_cr energy_cr
count if residue==. // no missing values
lab var residue "crop residue from cereals, energy crops, and field crops"

* Atmospheric deposition. 
gen f_prp_cow = SE085*nex_cow
gen f_prp_cattle = SE090*nex_cattle
gen f_prp_pigs = SE100*nex_pigs
gen f_prp = f_prp_cow+f_prp_cattle+f_prp_pigs
gen atmospheric = ((((n_fert*0.1)+(f_prp*0.2))*0.01))*298
lab var atmospheric "atmospheric deposition from fertilizers and livestock"
drop nex_* f_prp_*
sum atmospheric

* leaching/runoff // omitting f_som, add cr
gen leaching = ((n2o_fert+f_prp)*0.3*0.0075)*298
lab var leaching "n2o from leaching/runoff"
sum leaching

/* CO2 from energy. data sources for value inputs: 
* 	notes: 
	estimating liters/fuel from expenditure and converting to TJ/liter
	gas, diesel, and heating fuel price data from statista
	energy conversion data from Berkeley study (see paper)
*/
gen motor_co2 = (F62/gasoline)*(34.2*10^-5)*(18.9/10^6) 
lab var motor_co2 "carbon emissions from motor fuels"
sum motor_co2

/* CO2 from heating fuels 
* 	notes and assumptions:
	natural gas or oil are predominant heating sources in Germany,
		so these values are averaged since specific heat source isnt in fadn: 
	for calorified values: 37.3 MJ/liter in oil & 39.0 MJ/l in gas = 38.15 MJ/l
	for default IPCC values: 21.1 and 17.5 = 19.3
*/
gen heating_co2 = (F80/heat)*(38.15*10^5)*(19.3/10^6)
lab var heating_co2 "carbon emissions from heating fuels"
sum heating_co2

/* carbon stock 
* 	notes:
	using tier 1 gain/loss method from IPCC
	only measured for forest and other permanent crops, as the IPCC assumes 
		that annual crops have an insignificant impact on carbon stock
*/	
gen forest_stock = SE075*4*0.5
gen perm_stock = (SE054*2.1)-(SE054*63)
gen carbon_stock = forest_stock+perm_stock
lab var forest_stock "C-stock forest"
lab var perm_stock   "C-stock permacult"
lab var carbon_stock "C-stock total"

* aggregating all emissions estimations into one variable
gen ghg_emissions_sum = mm_n2o+mm_ch4+enteric+n2o_fert+atmospheric ///
	+leaching+motor_co2+carbon_stock+residue 
gen ghg_emissions = ghg_emissions_sum/SE410  
sum ghg_emissions, de  
tabstat ghg_emissions, by(TF14) stat(mean sd min max)
lab var ghg_emissions ///
	"intensity of carbon, nitrous, and methane emissions"
drop mm_* enteric *_fert residue f_prp atmospheric leaching ///
	motor_co2 *_stock ghg_emissions_sum

********************************************************************************
/*** ECOLOGICAL VALUE OF LAND
* checking data
browse id year *_h SE025 SE030
 notes on land data from tests below: 
	1) permanent crops is a sum of orchard, other perm, forage crops, fallows, set aside, out of production, woodland (i.e. do not include perm crops in aggregations)
 	2) set aside and out of production are often the same. calculating to remove any double counting and merge them into 1 variable
 	3) the difference between set aside and out of production appears to be equal to fallow
 	4) land used for energy crops and woodland not included in total uaa: the latter makes sense but why the former?
*/
gen out_of_production = SE074-SE073
sum out_of_production
* sum produced no negative numbers so it is assumed this new variable will distinguish between set aside and out of production
drop SE074
gen fallow_test = SE072-out_of_production
sum fallow_test // test to see if fallow and out of production are duplicates. produced a min of -.0000305 and a max of .0000153; assumed to be rounding errors so out of production will be dropped to avoid double counting
drop out_of_production
drop fallow_test
gen total_land = SE035+SE041+SE042+SE046+SE050+SE055+SE065+SE071+SE072+SE073+SE075
gen land_test = total_land-SE025
sum land_test 
gsort -land_test // checking what is not listed in total UAA
gen test2 = (SE042+SE075)-land_test // energy crops and woods not listed in total uaa. test produced a min of -.0100067 and a max of .0100001, assumed to be rounding difference
drop land_test
drop test2

** calculating diversity using health food diversity index and berry index
* as the list of crops will be used several times I define a macro for it which then can be called repededly:
global croplist SE035 SE041   SE042  SE046  SE050 SE055 SE065  SE071 SE072  SE073 SE075
**              cer   oFieldC energy vegFlo Viny  Orch  oPermC Forag fallow SetAs Wood
global croplistlength : word count $croplist

* NEW METHOD BASED ON ECOLOGICAL QUALITY (%)
* input values
gen land_inprod = SE025-(SE072+SE073) // land used in production only

gen grazing = .    // percentage of land that is for forage crops
replace grazing = 0 if SE071/SE025 < 0.66
replace grazing = 1 if SE071/SE025 >= 0.66

gen luha = SE080/land_inprod  // total livestock units per ha

gen input_sum = (SE295+SE300+SE310+SE315)/land_inprod  // expenditure per ha on fertilizers, pesticides, and feedstuffs
gen inputs = .
replace inputs = 0 if input_sum > 250
replace inputs = 1 if input_sum <= 250 & input_sum > 80
replace inputs = 2 if input_sum <= 80

gen organic = .   // recategorizing organic: partial or transitioning included with organic
replace organic = 0 if A32 == 1
replace organic = 1 if A32 == 2 | A32 == 3

gen irrigation = .  // dummy variable for if farm has irrigation
replace irrigation = 0 if A40 == 0
replace irrigation = 1 if A40 > 0

* creating ecological value of used land
gen evul = .
replace evul = 0.05 if (organic == 0 & irrigation == 1) 
replace evul = 0.05 if (organic == 0 & irrigation == 0 & inputs == 0)
replace evul = 0.1 if organic == 1 & inputs == 1
replace evul = 0.15 if grazing == 0 & inputs != 0
replace evul = 0.15 if organic == 1 & (irrigation ==1 | inputs == 0)
replace evul = 0.2 if grazing == 1 & (luha > 2 | inputs == 0)
replace evul = 0.2 if grazing == 1 & luha < 2 & inputs != 0
replace evul = 0.2 if organic == 1 & inputs == 1
replace evul = 0.25 if organic == 0 & inputs == 2
replace evul = 0.325 if grazing == 0 & luha < 1 & inputs == 2
replace evul = 0.35 if organic == 1 & inputs == 2
replace evul = 0.4 if grazing == 1 & luha < 1 & inputs < 80
replace evul = 1 if grazing == 1 & luha < 0.3
tab evul

* creating total ecological quality of land on the farm: evul + land not being used in production
gen tot_land = SE025+SE075  // total land on farm
gen noprod = SE072+SE073+SE075  // land with 100% ecological quality (i.e. not in production)
gen land_quality = ((land_inprod*evul)+noprod)/tot_land
lab var land_quality "Ecological value of land"
drop land_inprod grazing luha input_sum inputs organic irrigation evul tot_land noprod

********************************************************************************
*** MEDIAN WAGE CALCULATIONS

gen p_wage = SE370/SE021    // consider outlier cleaning. many values are below 2€/hour
lab var p_wage    "p_wage=wages paid(SE370) / PaidLabInput(SE021)"
sum p_wage, de  // checking the values

gen med_region_n3 = medwage_n3/1920 // annual wage / avg # of working hrs per year
lab var med_region_n3 "med_region_n3=NUTS3 all-sector-median wage"

gen paid_wage = p_wage/med_region_n3 
replace paid_wage = 0 if paid_wage == .
lab var paid_wage "wage_ratio=p_wage(n3-median FarmWagesPaid) / med_region_n3(n3 AllSectorMedianWage)"
*qui log on
di "`=char(12)' Distrib of paid_wage: ratio of farm wage and median all-sector-wage (both nuts-3 medians):"
codebook paid_wage
*qui log off  
drop p_wage med_region_n3 

* "provision of employment" = employment created + contracts

gen prov_employ = (SE370+SE350)/SE131
sum prov_employ
lab var prov_employ `"Provision of employment and contract work to t output [€/€]"'

********************************************************************************
* MULTI-FACTOR PRODUCTIVITY

* I.a) LAND USE COST COMPUTATION: 
gen lruv = F86 / SE030           // farm specifc raw Land Rental Unit Value 
*** compute mean of (plausible) land rent values by each combination of TF14 and A1
*gen lruv1 = lruv if yrseq == 1    //  contains only one nonmissing lruv per farm (avoids unequal weighting farms w different # of participation years differently according to their #)
local lruvUpLimspec 4000 // for plausible land rental price computation: upper Euro-per-ha-and-year limit for inclusion among specialized horticulture, wine, fruits
local lruvUpLimrest 2000 // for plausible land rental price computation: upper Euro-per-ha-and-year limit for inclusion among all other farm types
replace lruv  = . if  (( inlist(TF14,20,35,36) & lruv>=`lruvUpLimspec' ) | (!inlist(TF14,20,35,36) & lruv>=`lruvUpLimrest')) // set farm specific lruv to missinhg where implausible
bysort TF14: egen lruvTF14 = mean(lruv)        // mean of (plausible) land rent values by each combination of TF14
bysort TF14 A1: egen lruvTF14A1 = mean(lruv)        // mean of (plausible) land rent values by each combination of TF14 and A1
replace lruvTF14A1 = lruvTF14 if inlist(lruvTF14A1,.,0)       // use TF14 avg if avg for specific A1 is missing
* END OF: compute mean of (plausible) land rent values by each combination of TF14 and A1

local lruvLoLimspec 500 // to determine for which farms to impute land rent unit value: lower Euro-per-ha-and-year limit for inclusion among specialized horticulture, wine, fruits
local lruvLoLimrest 200 // to determine for which farms to impute land rent unit value: lower Euro-per-ha-and-year limit for inclusion among all other farm types
replace lruv = lruvTF14A1 if  ( inlist(TF14,20,35,36) & ((lruv<`lruvLoLimspec' )|(lruv>`lruvUpLimspec' ))) | (!inlist(TF14,20,35,36) & ((lruv<`lruvLoLimrest' )|(lruv>`lruvUpLimrest'))) // replace implausible farm specific lruv by means per A1 and TF14
gen lndcost = F86 + (SE025-SE030) * lruv  // land use costs 
* END OF: COMPUTE LAND USE COSTS

* I.b) LABOR COST 
gen pluv = SE370 / SE020           // farm specifc raw paid labor unit value
*** compute mean of (plausible) paid labor wage by A1
*gen pluv1 = pluv if yrseq == 1    //  contains only one nonmissing pluv per farm (avoids unequal weighting farms w different # of participation years differently according to their #)
local pluvLoLim 6000 // for plausible paid labor wage computation: lower Euro-per-AWU-and-year limit for inclusion
local pluvUpLim 50000 // for plausible paid labor wage computation: upper Euro-per-AWU-and-year limit for inclusion
gen lruv1_roh  =  pluv
replace pluv  = . if  ( pluv<`pluvLoLim' ) | (pluv>`pluvUpLim') // set farm specific pluv to missinhg where implausible
bysort A1: egen pluvA1 = mean(pluv)        // mean of (plausible) paid labor wage by federal state (A1)
* END OF: compute mean of (plausible) paid labor wage values by A1
replace pluv = pluvA1 if ( pluv<`pluvLoLim' ) | (pluv>`pluvUpLim')  // replace implausible farm specific pluv by means per A1
lab var pluv "pluv: Paid labor Unit Value (SE370 and SE020, w outliers replaced by mean per A1)"
gen labcost = SE370 + SE015 * pluv  // labor costs 

* I.c) CAPITAL COST COMPUTATION (based on 8 alternative formulae): 
gen air =  .04  // assumed interest rate  4% (LH ...)
gen capcost = SE380 + max((SE501-G95CV),0)*air

* II. MULTI FACTOR PRODUCTIVITY
  egen totcost = rowtotal(lndcost labcost capcost)
  gen productivity  = SE415/totcost   // multi factor productivity computed as maySE415/totcost`i'
    lab var productivity "productivity=SE415/totcost [€/€])"
drop lruv* pluv* *cost air
*summarize productivity if yrseq==1, detail    
   
*** * I want a constant value for the profit thresholds when the data are collapsed
*** * This probably isn't the best way to do it but it seems to work well:
*** foreach var of varlist pppepawu_*cpi {
*** egen `var'mean = mean(`var')
*** }

********************************************************************************
********************************************************************************
********************************************************************************

save dat/110-raw_indicators-panel.dta, replace  // for all calculated indicators with raw variables remaining 

keep idn YEAR NUTS2 TF8 TF14 ///
	profit productivity solvency e_diverse ghg_emissions  ///
	pesticide paid_wage land_quality prov_employ   ///
	SE131 SE146 SE165 A39  ///
	A32 A26

save dat/000-basic_indicators_papers2-3.dta, replace
* this file can now be moved to online repositories w/o data protection concerns

*qui log on
describe
codebook profit solvency e_diverse productivity pesticide ghg_emissions land_quality prov_employ paid_wage 
*qui log off
 

*end // end program logfi

*logfi  // call program logfi (this command only works if it is not in the last line of the do file, i.e. at least one cr/lf character must follow!)
